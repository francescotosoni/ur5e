def GlueCeiling():
  # Global parameters:
  global speed_ms    = 0.250
  global speed_rads  = 0.750
  global accel_mss   = 1.200
  global accel_radss = 1.200
  global blend_radius_m = 0.000
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to synchronize 2
  def Synchronize():
    # Use the following digital output to signal the state of the robot:
    DO_SYNC = 1
    
    # Use the following digital input to get the state of another robot:
    DI_SYNC = 1
    
    if (get_standard_digital_out(DO_SYNC) == get_standard_digital_in(DI_SYNC)):
      set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DI_SYNC)))
      sleep(0.1)
      thread Thread_wait_1():
        while (True):
          sleep(0.01)
        end
      end
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        global thread_handler_1=run Thread_wait_1()
        while (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
          sync()
        end
        kill thread_handler_1
      end
    else:
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DO_SYNC)))
      end
    end
  end

  #
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  # Subprogram approach_t1
  def approach_t1():
    # Using Ref. Baia 1: p[0.136922, -0.316489, 0.045000, 0.000000, 0.000000, -0.785398]
    # set_reference(p[0.136922, -0.316489, 0.045000, 0.000000, 0.000000, -0.785398])
    movej([-0.502131, -1.412087, -1.954629, -1.344808, 1.571674, -0.872672],1.20000,0.25000,0,0.0000)
  end
  
  # Subprogram to1
  def to1():
    # Using TCP Gripper Tool: p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
    set_tcp(p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
    movej([-0.653347, -1.811879, -2.056469, -0.843443, 1.571706, -1.023824],1.20000,0.25000,0,0.0000)
  end
  
  # Subprogram GluePath
  def GluePath():
    blend_radius_m = 0.0400
    speed_ms    = 0.1000
    to2()
    to3()
    to4()
    to5()
  end
  
  # Subprogram to2
  def to2():
    movel([-0.596133, -1.466651, -2.436323, -0.808766, 1.571674, -0.966614],accel_mss,speed_ms,0,0.000)
  end
  
  # Subprogram to3
  def to3():
    movel([-0.479021, -1.646249, -2.260498, -0.804750, 1.571652, -0.849551],accel_mss,speed_ms,0,0.000)
  end
  
  # Subprogram to4
  def to4():
    movel([-0.194601, -1.473986, -2.430196, -0.807269, 1.571344, -0.565078],accel_mss,speed_ms,0,0.000)
  end
  
  # Subprogram to5
  def to5():
    movel([-0.366770, -1.815718, -2.051373, -0.844469, 1.571498, -0.737250],accel_mss,speed_ms,0,0.000)
  end
  
  
  # Main program:
  # Program generated by RoboDK v5.3.2 for UR5e on 17/12/2021 16:25:46
  # Using nominal kinematics.
  approach_t1()
  to1()
  GluePath()
  approach_t1()
  # End of main program
end

GlueCeiling()
