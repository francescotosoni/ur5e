def Pick_n_Place2():
  # Global parameters:
  global speed_ms    = 0.250
  global speed_rads  = 0.750
  global accel_mss   = 1.200
  global accel_radss = 1.200
  global blend_radius_m = 0.000
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to synchronize 2
  def Synchronize():
    # Use the following digital output to signal the state of the robot:
    DO_SYNC = 1
    
    # Use the following digital input to get the state of another robot:
    DI_SYNC = 1
    
    if (get_standard_digital_out(DO_SYNC) == get_standard_digital_in(DI_SYNC)):
      set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DI_SYNC)))
      sleep(0.1)
      thread Thread_wait_1():
        while (True):
          sleep(0.01)
        end
      end
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        global thread_handler_1=run Thread_wait_1()
        while (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
          sync()
        end
        kill thread_handler_1
      end
    else:
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DO_SYNC)))
      end
    end
  end

  #
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  # Subprogram approach_t2
  def approach_t2():
    # Using Ref. Baia 2: p[-0.049505, 0.374716, 0.045000, 0.000000, 0.000000, -0.785398]
    # set_reference(p[-0.049505, 0.374716, 0.045000, 0.000000, 0.000000, -0.785398])
    # Using TCP Gripper Tool: p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
    set_tcp(p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
    movej([1.637857, -1.308889, -1.916564, -1.487333, 1.570648, -0.334166],1.20000,0.25000,0,0.0000)
  end
  
  # Subprogram openGripper
  def openGripper():
    set_tool_digital_out(0,True)
  end
  
  # Subprogram move_t2
  def move_t2():
    movej([1.636398, -1.632693, -2.388274, -0.692140, 1.570604, -0.335510],1.20000,0.25000,0,0.0000)
  end
  
  # Subprogram closeGripper
  def closeGripper():
    set_tool_digital_out(0,False)
  end
  
  # Subprogram approach_t1
  def approach_t1():
    # Using Ref. Baia 1: p[0.136922, -0.316489, 0.045000, 0.000000, 0.000000, -0.785398]
    # set_reference(p[0.136922, -0.316489, 0.045000, 0.000000, 0.000000, -0.785398])
    movej([-0.502131, -1.412087, -1.954629, -1.344808, 1.571674, -0.872672],1.20000,0.25000,0,0.0000)
  end
  
  # Subprogram move_t1
  def move_t1():
    movej([-0.502131, -1.738522, -2.301740, -0.671254, 1.571669, -0.872665],1.20000,0.25000,0,0.0000)
  end
  
  
  # Main program:
  # Program generated by RoboDK v5.3.2 for UR5e on 17/12/2021 16:24:00
  # Using nominal kinematics.
  approach_t2()
  openGripper()
  move_t2()
  closeGripper()
  sleep(1.000)
  approach_t2()
  approach_t1()
  move_t1()
  openGripper()
  sleep(1.000)
  approach_t1()
  closeGripper()
  # End of main program
end

Pick_n_Place2()
